{"mappings":"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","sources":["src/sumaCadena.js","src/presenter.js"],"sourcesContent":["class SumaCadena{\n\n    constructor(){\n        this.listaSeparadores = [',', '-'];\n        this.listaNumeros = [];\n    }\n\n    capturarPrimerNumero(cadena){ //debí crear este método desde el punto 6 más o menos, recién en el 8 me di cuenta por el regex que apliqué, pensé que podía capturar todo de una, pero no\n        let regExpFirst = /(\\d+)/g;\n        this.listaNumeros = [];\n        let primerNumero;\n        primerNumero = parseInt(cadena.match(regExpFirst)[0]);\n        if(this.esMayor1000(primerNumero)){\n            primerNumero = 0;\n        }\n        this.listaNumeros.push(primerNumero);\n    }\n\n    capturarOtrosNumero(lista, pos){ //captura los números uno por uno despúes del primero 4,2,3 -> 2 y después 3 porque 4 es el primero\n        let numero;\n        numero = parseInt(lista[pos][1])\n        if(this.esMayor1000(numero)){\n            numero = 0;\n        }\n        return numero;\n    }\n\n    ejercerSeparadores(pos, cadena){\n        let separador = `\\\\${this.listaSeparadores[pos]}`;\n        if(this.listaSeparadores[pos].length > 1){          //para separadores con más de un caracter y evitar problemas con caracteres especiales del regex\n            separador = \"\";\n            for(var i = 0; i < this.listaSeparadores[pos].length; i++){\n                separador = separador + `\\\\${this.listaSeparadores[pos][i]}`;\n            }\n        }\n        let regExpCad = `${separador}(\\\\d+)`;\n        var re = new RegExp(regExpCad,\"g\");\n        let lista = [...cadena.matchAll(re)];//2. una vez que sacamos el número del separador dado por pos lo añadimos a la lista\n        for(var i = 0; i < lista.length; i++){\n            this.listaNumeros.push(this.capturarOtrosNumero(lista, i));\n        }\n        cadena = cadena.replace(re, \"\");//3. Borramos el número que ya se añadió para evitar que se repliquen después con otros separadores\n        return cadena;\n    }\n\n    separarNumeros(cadena){\n        let numero = 0;\n        if(cadena.length != 0){\n            this.capturarPrimerNumero(cadena);\n            for(var i = 0; i < this.listaSeparadores.length; i++){\n                cadena = this.ejercerSeparadores(i, cadena);//1. sacamos los números de acuerdo al separador\n            }\n            return this.listaNumeros.sort();\n        }\n        return numero;\n    }\n\n    obtenerListaNumeros(cadena){\n        this.agregarSeparador(cadena);\n        return this.separarNumeros(cadena);\n    }\n\n    sumarCadena(cadena){\n        let total = 0;\n        this.obtenerListaNumeros(cadena);\n        for(var i = 0; i<this.listaNumeros.length; i++){\n            total = total + this.listaNumeros[i];\n        }\n        return total;\n    }\n    \n    esMayor1000(numero){\n        return numero > 1000; \n    }\n\n    agregarSeparador(cadena){\n        let nuevaCadena = cadena;\n        let segundoSeparador = this.obtenerSegundoNuevoSeparador(cadena);\n        if (segundoSeparador[0]){\n            this.listaSeparadores.push(segundoSeparador[0]);\n            nuevaCadena = segundoSeparador[1];\n        }\n        let separador = this.obtenerNuevoSeparador(nuevaCadena);\n        if(separador){\n            this.listaSeparadores.push(separador);\n        }\n        return this.listaSeparadores;\n    }\n\n    mostrarSeparador(pos){\n        return this.listaSeparadores[pos];\n    }\n\n    obtenerNuevoSeparador(cadena){\n        let separador;\n        let regExpCad = '//\\\\[(.*)\\\\]';\n        var re = new RegExp(regExpCad,\"g\"); \n        separador = [...cadena.matchAll(re)];\n        if(separador.length == 0){\n            return false;\n        }\n        return this.obtenerPrimerSeparador(separador);\n    }\n\n    obtenerPrimerSeparador(separador){\n        return separador[0][1];\n    }\n\n    obtenerSegundoNuevoSeparador(cadena){\n        let separador = '';\n        let regExpCad = '\\\\]\\\\[(.*)\\\\]';\n        var re = new RegExp(regExpCad,\"g\"); \n        separador = [...cadena.matchAll(re)];\n        if(separador.length == 0){\n            return false;\n        }\n        let segundoSeparador = separador[0][1];\n        cadena = this.quitarSegundoSeparador(cadena, re);\n        return [segundoSeparador, cadena];\n    }\n\n\n    \n    quitarSegundoSeparador(cadena, re){\n        return cadena.replace(re, \"]\");\n    }\n\n}\n\nexport default SumaCadena;","import SumaCadena from './sumaCadena'\n\nconst cadenaInput = document.querySelector(\"#cadena\");\nconst form = document.querySelector(\"#sumar-form\");\nconst div = document.querySelector(\"#resultado-div\");\n\nform.addEventListener(\"submit\", (event) => {\n  event.preventDefault();\n\n  const sumaCadena = new SumaCadena();\n\n  let cadena = cadenaInput.value;\n  const total = sumaCadena.sumarCadena(cadena);\n\n  div.innerHTML = \"<p>Total= \" + total + \"</p>\";\n});\n"],"names":["SumaCadena","$d7fadeffae10e847$var$_classCallCheck","this","listaSeparadores","listaNumeros","value","cadena","regExpFirst","primerNumero","parseInt","match","esMayor1000","push","lista","pos","numero","separador","concat","length","i","regExpCad","re","RegExp","$d7fadeffae10e847$var$_toConsumableArray","matchAll","capturarOtrosNumero","replace","capturarPrimerNumero","ejercerSeparadores","sort","agregarSeparador","separarNumeros","total","obtenerListaNumeros","nuevaCadena","segundoSeparador","obtenerSegundoNuevoSeparador","obtenerNuevoSeparador","obtenerPrimerSeparador","quitarSegundoSeparador","$89b0829c857563b6$var$_sumaCadena","parcelRequire","cadenaInput","document","querySelector","form","div","addEventListener","event","preventDefault","sumaCadena","sumarCadena","innerHTML"],"version":3,"file":"index.12658199.js.map"}